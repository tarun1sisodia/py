#!/bin/bash

# Exit on any error
set -e

echo "🚀 Starting Smart Campus Backend Deployment..."

# Load environment variables
if [ -f .env ]; then
    source .env
else
    echo "⚠️  .env file not found, creating from template..."
    # Database credentials
    DB_USER="root"
    DB_PASSWORD="root1234"
    DB_HOST="localhost"
    DB_PORT="3306"
    DB_NAME="smart_campus"
    
    # Generate secure JWT secret
    JWT_SECRET=$(openssl rand -base64 32)
    
    # Create .env file
    cat > .env << EOF
# Server Configuration
PORT=8080
GIN_MODE=debug

# Database Configuration
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_NAME=${DB_NAME}

# JWT Configuration
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRATION=24h
JWT_REFRESH_EXPIRATION=168h

# Security
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
RATE_LIMIT=100
RATE_LIMIT_DURATION=1m

# Firebase Configuration
FIREBASE_CREDENTIALS_PATH=./config/firebase-credentials.json
FIREBASE_API_KEY=${FIREBASE_API_KEY}
FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
EOF

    echo "✅ .env file created successfully"
fi

# Check if MySQL is installed
echo "🔍 Checking MySQL installation..."
if ! command -v mysql &> /dev/null; then
    echo "❌ MySQL is not installed. Installing MySQL..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo apt-get update
        sudo apt-get install -y mysql-server
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install mysql
    else
        echo "❌ Unsupported operating system"
        exit 1
    fi
fi

# Start MySQL if not running
echo "🔄 Ensuring MySQL is running..."
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    sudo service mysql status || sudo service mysql start
elif [[ "$OSTYPE" == "darwin"* ]]; then
    mysql.server status || mysql.server start
fi

# Create database if not exists
echo "🗄️  Setting up database..."
mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" << EOF
CREATE DATABASE IF NOT EXISTS ${DB_NAME};
USE ${DB_NAME};

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    id VARCHAR(36) PRIMARY KEY,
    role ENUM('teacher', 'student') NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    enrollment_number VARCHAR(50) UNIQUE,
    employee_id VARCHAR(50) UNIQUE,
    department VARCHAR(100),
    year_of_study INT,
    device_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Sessions Table
CREATE TABLE IF NOT EXISTS attendance_sessions (
    id VARCHAR(36) PRIMARY KEY,
    teacher_id VARCHAR(36) NOT NULL,
    course_id VARCHAR(36) NOT NULL,
    session_date DATE NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    wifi_ssid VARCHAR(100),
    wifi_bssid VARCHAR(100),
    location_latitude DECIMAL(10, 8),
    location_longitude DECIMAL(11, 8),
    status ENUM('active', 'completed', 'cancelled') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (teacher_id) REFERENCES users(id)
);

-- Attendance Records Table
CREATE TABLE IF NOT EXISTS attendance_records (
    id VARCHAR(36) PRIMARY KEY,
    session_id VARCHAR(36) NOT NULL,
    student_id VARCHAR(36) NOT NULL,
    marked_at TIMESTAMP NOT NULL,
    wifi_ssid VARCHAR(100),
    wifi_bssid VARCHAR(100),
    location_latitude DECIMAL(10, 8),
    location_longitude DECIMAL(11, 8),
    device_id VARCHAR(255),
    verification_status ENUM('pending', 'verified', 'rejected') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES attendance_sessions(id),
    FOREIGN KEY (student_id) REFERENCES users(id)
);

-- ================================
-- Additional Admin Database Schema
-- ================================

-- Admins Table: Stores admin credentials and roles
CREATE TABLE admins (
    id VARCHAR(36) PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('super_admin', 'moderator') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Admin Audit Logs Table: Logs actions performed by admin users for accountability
CREATE TABLE admin_audit_logs (
    id VARCHAR(36) PRIMARY KEY,
    admin_id VARCHAR(36) NOT NULL,
    action VARCHAR(100) NOT NULL,
    details JSON,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_id) REFERENCES admins(id)
);

-- Reports Table: Stores reports generated by admin users (e.g., attendance, user activity, security)
CREATE TABLE reports (
    id VARCHAR(36) PRIMARY KEY,
    report_type ENUM('attendance', 'user_activity', 'security') NOT NULL,
    generated_by VARCHAR(36) NOT NULL,  -- References the admin who generated the report
    generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data JSON,
    FOREIGN KEY (generated_by) REFERENCES admins(id)
);

EOF

echo "✅ Database setup completed"

# Install Go dependencies
echo "📦 Installing dependencies..."
go mod tidy

# Build the application
echo "🔨 Building application..."
mkdir -p bin
go build -o bin/server ./cmd/server/main.go

# Setup systemd service (Linux only)
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "⚙️  Setting up systemd service..."
    sudo tee /etc/systemd/system/smart-campus.service << EOF
[Unit]
Description=Smart Campus Backend Server
After=network.target mysql.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$(pwd)
ExecStart=$(pwd)/bin/server
Restart=always
Environment=GIN_MODE=release

[Install]
WantedBy=multi-user.target
EOF

    # Reload systemd and start service
    echo "🔄 Starting service..."
    sudo systemctl daemon-reload
    sudo systemctl enable smart-campus
    sudo systemctl start smart-campus
    
    echo "✅ Service started successfully"
else
    # For non-Linux systems, just run the binary
    echo "▶️  Starting server..."
    ./bin/server &
fi

# Verify deployment
echo "🔍 Verifying deployment..."
sleep 5
if curl -s http://localhost:8080/health > /dev/null; then
    echo "✅ Server is running successfully!"
else
    echo "❌ Server failed to start"
    exit 1
fi

echo "
🎉 Deployment completed successfully!

📝 Next steps:
1. Update CORS settings in .env if needed
2. Configure email settings if required
3. Set up SSL/TLS for production
4. Configure backup strategy

🔗 API Documentation: http://localhost:8080/swagger/index.html
🖥️  Health Check: http://localhost:8080/health
"

# Add Firebase setup to deployment script
echo "Setting up Firebase..."
if [ ! -f "./config/firebase-credentials.json" ]; then
    echo "⚠️  Firebase credentials not found"
    echo "Please place your firebase-credentials.json in the config directory"
    exit 1
fi

# Add Firebase environment variables
cat >> .env << EOF

# Firebase Configuration
FIREBASE_CREDENTIALS_PATH=./config/firebase-credentials.json
FIREBASE_API_KEY=${FIREBASE_API_KEY}
FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
EOF 